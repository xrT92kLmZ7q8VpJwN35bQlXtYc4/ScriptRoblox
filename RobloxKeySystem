-- NyricXKeySystem.lua
local NyricXKeySystem = {}
NyricXKeySystem.__index = NyricXKeySystem

-- Services
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local VirtualUser = game:GetService("VirtualUser")
local player = Players.LocalPlayer

-- Themes
local themes = {
    Dark = {
        background = Color3.fromRGB(20, 20, 20),
        backgroundGradientStart = Color3.fromRGB(40, 40, 40),
        backgroundGradientEnd = Color3.fromRGB(10, 10, 10),
        text = Color3.fromRGB(220, 220, 220),
        button = Color3.fromRGB(0, 150, 0),
        buttonHover = Color3.fromRGB(0, 170, 0),
        secondaryButton = Color3.fromRGB(180, 70, 0),
        secondaryButtonHover = Color3.fromRGB(200, 80, 0),
        closeButton = Color3.fromRGB(180, 0, 0),
        closeButtonHover = Color3.fromRGB(200, 0, 0),
        tutorialButton = Color3.fromRGB(0, 120, 180),
        tutorialButtonHover = Color3.fromRGB(0, 140, 200),
    },
    Darker = {
        background = Color3.fromRGB(10, 10, 10),
        backgroundGradientStart = Color3.fromRGB(30, 30, 30),
        backgroundGradientEnd = Color3.fromRGB(5, 5, 5),
        text = Color3.fromRGB(200, 200, 200),
        button = Color3.fromRGB(0, 130, 0),
        buttonHover = Color3.fromRGB(0, 150, 0),
        secondaryButton = Color3.fromRGB(160, 50, 0),
        secondaryButtonHover = Color3.fromRGB(180, 60, 0),
        closeButton = Color3.fromRGB(150, 0, 0),
        closeButtonHover = Color3.fromRGB(170, 0, 0),
        tutorialButton = Color3.fromRGB(0, 100, 160),
        tutorialButtonHover = Color3.fromRGB(0, 120, 180),
    },
    Light = {
        background = Color3.fromRGB(240, 240, 240),
        backgroundGradientStart = Color3.fromRGB(220, 220, 220),
        backgroundGradientEnd = Color3.fromRGB(255, 255, 255),
        text = Color3.fromRGB(40, 40, 40),
        button = Color3.fromRGB(0, 120, 0),
        buttonHover = Color3.fromRGB(0, 140, 0),
        secondaryButton = Color3.fromRGB(150, 60, 0),
        secondaryButtonHover = Color3.fromRGB(170, 70, 0),
        closeButton = Color3.fromRGB(150, 0, 0),
        closeButtonHover = Color3.fromRGB(170, 0, 0),
        tutorialButton = Color3.fromRGB(0, 100, 150),
        tutorialButtonHover = Color3.fromRGB(0, 120, 170),
    },
    Acrylic = {
        background = Color3.fromRGB(20, 20, 20),
        backgroundGradientStart = Color3.fromRGB(40, 40, 40),
        backgroundGradientEnd = Color3.fromRGB(10, 10, 10),
        text = Color3.fromRGB(220, 220, 220),
        button = Color3.fromRGB(0, 150, 0),
        buttonHover = Color3.fromRGB(0, 170, 0),
        secondaryButton = Color3.fromRGB(180, 70, 0),
        secondaryButtonHover = Color3.fromRGB(200, 80, 0),
        closeButton = Color3.fromRGB(180, 0, 0),
        closeButtonHover = Color3.fromRGB(200, 0, 0),
        tutorialButton = Color3.fromRGB(0, 120, 180),
        tutorialButtonHover = Color3.fromRGB(0, 140, 200),
    },
}

-- Tween Info
local tweenInfoQuadOut = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
local tweenInfoQuadIn = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.In)
local tweenInfoBackOut = TweenInfo.new(0.8, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
local tweenInfoShake = TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)

-- Initialize key storage
local keys = {}
local getKeyLink = ""

-- Create Window
function NyricXKeySystem:CreateWindow(config)
    local self = setmetatable({}, NyricXKeySystem)
    self.Title = config.Title or "NyricX Hub - Key System"
    self.Center = config.Center or true
    self.Acrylic = config.Acrylic or false
    self.Theme = themes[config.Theme] or themes["Dark"]
    self.Size = config.Size or UDim2.new(0, 600, 0, 300)
    self.Icon = config.Icon or "rbxassetid://91324246097383"
    self.getenv = config.getenv or false
    self.Buttons = {}
    self.Keys = { key24hours = {}, keyweek = {}, keymonth = {}, keyboost = {} }
    self.KeyTimes = { key24hours = 24 * 60 * 60, keyweek = 7 * 24 * 60 * 60, keymonth = 30 * 24 * 60 * 60, keyboost = 99999999999999 }
    self.getKeyLink = ""

    -- Create ScreenGui
    self.ScreenGui = Instance.new("ScreenGui")
    self.ScreenGui.Name = "NyricXKeySystemUI"
    self.ScreenGui.IgnoreGuiInset = true
    self.ScreenGui.ResetOnSpawn = false
    self.ScreenGui.Parent = game.CoreGui

    -- Create Main Frame
    self.MainFrame = Instance.new("Frame")
    self.MainFrame.Size = self.Size
    self.MainFrame.Position = UDim2.new(0.5, -self.Size.X.Offset / 2, self.Center and 0.5 or 1, self.Center and -self.Size.Y.Offset / 2 or 0)
    self.MainFrame.BackgroundColor3 = self.Theme.background
    self.MainFrame.BackgroundTransparency = 0.1
    self.MainFrame.Parent = self.ScreenGui

    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(0, 20)
    uiCorner.Parent = self.MainFrame

    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new(self.Theme.backgroundGradientStart, self.Theme.backgroundGradientEnd)
    gradient.Rotation = 45
    gradient.Parent = self.MainFrame

    if self.Center then
        TweenService:Create(self.MainFrame, tweenInfoBackOut, {Position = UDim2.new(0.5, -self.Size.X.Offset / 2, 0.5, -self.Size.Y.Offset / 2)}):Play()
    else
        TweenService:Create(self.MainFrame, tweenInfoBackOut, {Position = UDim2.new(0.5, -self.Size.X.Offset / 2, 0, 20)}):Play()
    end

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(0, self.Size.X.Offset * 0.8, 0, 40)
    titleLabel.Position = UDim2.new(0.5, -self.Size.X.Offset * 0.4, 0, 20)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = self.Title
    titleLabel.TextColor3 = self.Theme.text
    titleLabel.Font = Enum.Font.FredokaOne
    titleLabel.TextSize = 28
    titleLabel.TextScaled = true
    titleLabel.TextWrapped = true
    titleLabel.TextXAlignment = Enum.TextXAlignment.Center
    titleLabel.Parent = self.MainFrame

    local icon = Instance.new("ImageLabel")
    icon.Size = UDim2.new(0, self.Size.X.Offset * 0.2, 0, self.Size.Y.Offset * 0.4)
    icon.Position = UDim2.new(0, 30, 0, 80)
    icon.BackgroundTransparency = 1
    icon.Image = self.Icon
    icon.Parent = self.MainFrame

    local keyLabel = Instance.new("TextLabel")
    keyLabel.Size = UDim2.new(0, self.Size.X.Offset * 0.7, 0, 30)
    keyLabel.Position = UDim2.new(0, self.Size.X.Offset * 0.3, 0, 70)
    keyLabel.BackgroundTransparency = 1
    keyLabel.Text = "Input Your Key"
    keyLabel.TextColor3 = self.Theme.text
    keyLabel.Font = Enum.Font.GothamBold
    keyLabel.TextSize = 20
    keyLabel.TextXAlignment = Enum.TextXAlignment.Left
    keyLabel.Parent = self.MainFrame

    self.TextBox = Instance.new("TextBox")
    self.TextBox.Size = UDim2.new(0, self.Size.X.Offset * 0.7, 0, 40)
    self.TextBox.Position = UDim2.new(0, self.Size.X.Offset * 0.3, 0, 100)
    self.TextBox.PlaceholderText = "Input Your Key"
    self.TextBox.PlaceholderColor3 = self.Theme.text:Lerp(Color3.new(0, 0, 0), 0.2)
    self.TextBox.Font = Enum.Font.GothamBold
    self.TextBox.BackgroundColor3 = self.Theme.background:Lerp(Color3.new(0, 0, 0), 0.1)
    self.TextBox.BackgroundTransparency = 0.3
    self.TextBox.TextColor3 = self.Theme.text
    self.TextBox.Text = ""
    self.TextBox.TextScaled = true
    self.TextBox.TextWrapped = true
    self.TextBox.ClipsDescendants = true
    self.TextBox.Parent = self.MainFrame

    local textBoxPadding = Instance.new("UIPadding")
    textBoxPadding.PaddingLeft = UDim.new(0, 10)
    textBoxPadding.PaddingRight = UDim.new(0, 10)
    textBoxPadding.Parent = self.TextBox

    local textBoxCorner = Instance.new("UICorner")
    textBoxCorner.CornerRadius = UDim.new(0, 20)
    textBoxCorner.Parent = self.TextBox

    if self.getenv and _G.getenv and _G.getenv.key then
        self.TextBox.Text = _G.getenv.key
    end

    self.StatusLabel = Instance.new("TextLabel")
    self.StatusLabel.Size = UDim2.new(0, self.Size.X.Offset * 0.7, 0, 25)
    self.StatusLabel.Position = UDim2.new(0, self.Size.X.Offset * 0.3, 0, 150)
    self.StatusLabel.BackgroundTransparency = 1
    self.StatusLabel.Text = "Ready to validate..."
    self.StatusLabel.TextColor3 = self.Theme.text:Lerp(Color3.new(0, 0, 0), 0.3)
    self.StatusLabel.Font = Enum.Font.Gotham
    self.StatusLabel.TextSize = 14
    self.StatusLabel.TextXAlignment = Enum.TextXAlignment.Left
    self.StatusLabel.Parent = self.MainFrame

    self.LoadingSpinner = Instance.new("ImageLabel")
    self.LoadingSpinner.Size = UDim2.new(0, 25, 0, 25)
    self.LoadingSpinner.Position = UDim2.new(0.5, -12, 0.5, -12)
    self.LoadingSpinner.BackgroundTransparency = 1
    self.LoadingSpinner.Image = "rbxassetid://7712218325"
    self.LoadingSpinner.ImageColor3 = self.Theme.text
    self.LoadingSpinner.Visible = false
    self.LoadingSpinner.Parent = self.MainFrame

    self.RotationTween = TweenService:Create(self.LoadingSpinner, TweenInfo.new(0.8, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1), {Rotation = 360})

    -- Anti-AFK
    player.Idled:Connect(function()
        VirtualUser:CaptureController()
        VirtualUser:ClickButton2(Vector2.new())
    end)

    return self
end

-- Get Input (using the TextBox since Roblox lacks native input dialogs)
function NyricXKeySystem:GetInput(prompt)
    -- Update the placeholder text to show the prompt
    self.TextBox.PlaceholderText = prompt
    -- Return the current text in the TextBox (caller should handle timing)
    return self.TextBox.Text
end

-- Create Notification
function NyricXKeySystem:CreateNotification(config)
    local toastFrame = Instance.new("Frame")
    toastFrame.Size = UDim2.new(0, 300, 0, 50)
    toastFrame.Position = UDim2.new(0.5, -150, 0, -50)
    toastFrame.BackgroundColor3 = self.Theme.background
    toastFrame.BackgroundTransparency = 0.2
    toastFrame.Parent = self.ScreenGui

    local toastCorner = Instance.new("UICorner")
    toastCorner.CornerRadius = UDim.new(0, 20)
    toastCorner.Parent = toastFrame

    local checkmark = Instance.new("ImageLabel")
    checkmark.Size = UDim2.new(0, 30, 0, 30)
    checkmark.Position = UDim2.new(0, 10, 0.5, -15)
    checkmark.BackgroundTransparency = 1
    checkmark.Image = "rbxassetid://7712218325"
    checkmark.ImageColor3 = config.Color or Color3.fromRGB(0, 255, 127)
    checkmark.ImageTransparency = 1
    checkmark.Parent = toastFrame

    local toastText = Instance.new("TextLabel")
    toastText.Size = UDim2.new(1, -50, 1, 0)
    toastText.Position = UDim2.new(0, 50, 0, 0)
    toastText.BackgroundTransparency = 1
    toastText.Text = config.Content or config.Title
    toastText.TextColor3 = self.Theme.text
    toastText.Font = Enum.Font.GothamBold
    toastText.TextSize = 14
    toastText.TextWrapped = true
    toastText.TextTransparency = 1
    toastText.TextXAlignment = Enum.TextXAlignment.Left
    toastText.Parent = toastFrame

    TweenService:Create(toastFrame, tweenInfoBackOut, {BackgroundTransparency = 0.1, Position = UDim2.new(0.5, -150, 0, 20)}):Play()
    TweenService:Create(checkmark, tweenInfoQuadOut, {ImageTransparency = 0}):Play()
    TweenService:Create(toastText, tweenInfoQuadOut, {TextTransparency = 0}):Play()

    task.spawn(function()
        task.wait(config.Duration or 2)
        TweenService:Create(toastFrame, tweenInfoQuadIn, {BackgroundTransparency = 0.2, Position = UDim2.new(0.5, -150, 0, -50)}):Play()
        TweenService:Create(checkmark, tweenInfoQuadIn, {ImageTransparency = 1}):Play()
        TweenService:Create(toastText, tweenInfoQuadIn, {TextTransparency = 1}):Play()
        task.wait(0.3)
        toastFrame:Destroy()
    end)
end

-- Create Error Effect
function NyricXKeySystem:CreateErrorEffect()
    local errorFrame = Instance.new("Frame")
    errorFrame.Size = UDim2.new(1, 0, 1, 0)
    errorFrame.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
    errorFrame.BackgroundTransparency = 1
    errorFrame.Parent = self.ScreenGui

    TweenService:Create(errorFrame, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {BackgroundTransparency = 0.8}):Play()
    task.wait(0.2)
    TweenService:Create(errorFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {BackgroundTransparency = 1}):Play()
    task.wait(0.3)
    errorFrame:Destroy()
end

-- Create Button
function NyricXKeySystem:CreateButton(config)
    local buttonName = config.Title:gsub("%s+", ""):lower()
    local buttonColor = self.Theme.button
    local buttonHoverColor = self.Theme.buttonHover

    if buttonName == "getkey" then
        buttonColor = self.Theme.secondaryButton
        buttonHoverColor = self.Theme.secondaryButtonHover
    elseif buttonName == "closeui" then
        buttonColor = self.Theme.closeButton
        buttonHoverColor = self.Theme.closeButtonHover
    elseif buttonName == "tutorial" then
        buttonColor = self.Theme.tutorialButton
        buttonHoverColor = self.Theme.tutorialButtonHover
    end

    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0, buttonName == "tutorial" and self.Size.X.Offset * 0.275 or self.Size.X.Offset * 0.25, 0, self.Size.Y.Offset * 0.1167)
    button.Position = UDim2.new(0, buttonName == "submitkey" and self.Size.X.Offset * 0.45 or buttonName == "getkey" and self.Size.X.Offset * 0.725 or buttonName == "tutorial" and self.Size.X.Offset * 1 or self.Size.X.Offset * 0.725, 0, buttonName == "closeui" and self.Size.Y.Offset * 0.783 or self.Size.Y.Offset * 0.633)
    button.Text = config.Title
    button.BackgroundColor3 = buttonColor
    button.BackgroundTransparency = 0.2
    button.TextSize = 16
    button.Font = Enum.Font.GothamBold
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.Parent = self.MainFrame

    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 15)
    buttonCorner.Parent = button

    if buttonName == "tutorial" then
        local tutorialsIcon = Instance.new("ImageLabel")
        tutorialsIcon.Size = UDim2.new(0, self.Size.X.Offset * 0.0625, 0, self.Size.Y.Offset * 0.0833)
        tutorialsIcon.Position = UDim2.new(0, self.Size.X.Offset * 0.0125, 0.5, -self.Size.Y.Offset * 0.0417)
        tutorialsIcon.BackgroundTransparency = 1
        tutorialsIcon.Image = self.Icon
        tutorialsIcon.ImageColor3 = self.Theme.text
        tutorialsIcon.Parent = button
    end

    button.MouseEnter:Connect(function()
        TweenService:Create(button, tweenInfoQuadOut, {BackgroundColor3 = buttonHoverColor, BackgroundTransparency = 0, Size = UDim2.new(0, buttonName == "tutorial" and self.Size.X.Offset * 0.2875 or self.Size.X.Offset * 0.2625, 0, self.Size.Y.Offset * 0.1333)}):Play()
    end)

    button.MouseLeave:Connect(function()
        TweenService:Create(button, tweenInfoQuadOut, {BackgroundColor3 = buttonColor, BackgroundTransparency = 0.2, Size = UDim2.new(0, buttonName == "tutorial" and self.Size.X.Offset * 0.275 or self.Size.X.Offset * 0.25, 0, self.Size.Y.Offset * 0.1167)}):Play()
    end)

    button.MouseButton1Down:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {Size = UDim2.new(0, buttonName == "tutorial" and self.Size.X.Offset * 0.2625 or self.Size.X.Offset * 0.2375, 0, self.Size.Y.Offset * 0.1)}):Play()
    end)

    button.MouseButton1Up:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(0, buttonName == "tutorial" and self.Size.X.Offset * 0.275 or self.Size.X.Offset * 0.25, 0, self.Size.Y.Offset * 0.1167)}):Play()
    end)

    if config.Callback then
        button.MouseButton1Click:Connect(config.Callback)
    end

    self.Buttons[buttonName] = button
    return button
end

-- Add Keys
function NyricXKeySystem:AddKeys(keyType, keyList)
    self.Keys[keyType] = keyList
    for _, key in ipairs(keyList) do
        table.insert(keys, {key = key, duration = self.KeyTimes[keyType], type = keyType})
    end
end

-- Set Key Link
function NyricXKeySystem:SetKeyLink(link)
    self.getKeyLink = link
end

-- Submit Key (Modified to return success and message)
function NyricXKeySystem:SubmitKey(inputKey)
    if not inputKey or inputKey == "" then
        return false, "Key cannot be empty."
    end

    self.StatusLabel.Text = "Validating key..."
    self.StatusLabel.TextColor3 = Color3.fromRGB(100, 100, 255)
    self.LoadingSpinner.Visible = true
    self.RotationTween:Play()

    local keyInfo = nil
    for _, validKey in ipairs(keys) do
        if inputKey == validKey.key then
            keyInfo = validKey
            break
        end
    end

    self.LoadingSpinner.Visible = false
    self.RotationTween:Pause()

    if keyInfo then
        local durationText
        if keyInfo.type == "key24hours" then
            durationText = "24 hours"
        elseif keyInfo.type == "keyweek" then
            durationText = "1 week"
        elseif keyInfo.type == "keymonth" then
            durationText = "1 month"
        elseif keyInfo.type == "keyboost" then
            durationText = "unlimited time (Boost)"
        end

        self.StatusLabel.Text = "Key Verified! (" .. keyInfo.type .. ")"
        self.StatusLabel.TextColor3 = Color3.fromRGB(0, 255, 127)
        return true, "Access granted for " .. durationText .. "!"
    else
        self.StatusLabel.Text = "Invalid Key! Try Again."
        self.StatusLabel.TextColor3 = Color3.fromRGB(255, 50, 50)
        self:CreateErrorEffect()
        for i = 1, 4 do
            TweenService:Create(self.MainFrame, tweenInfoShake, {Position = UDim2.new(0.5, -self.Size.X.Offset / 2 + math.random(-8, 8), 0.5, -self.Size.Y.Offset / 2)}):Play()
            task.wait(0.05)
        end
        return false, "Invalid key."
    end
end

-- Close the UI
function NyricXKeySystem:Close()
    TweenService:Create(self.MainFrame, tweenInfoQuadIn, {BackgroundTransparency = 1, Size = UDim2.new(0, self.Size.X.Offset + 20, 0, self.Size.Y.Offset + 20)}):Play()
    task.wait(0.3)
    self.ScreenGui:Destroy()
end

return NyricXKeySystem
